This is the main "README" file for the overpassAPI SlackBuilds script.

Guide details are provided in README files as follows:

 *) README - this file:
     Provide hardware requirements and software installation.
     Software provide tools to initial, maintain and query database.

 *) README.data :
     Has details about data files needed to initial and populate overpass
     database. How to choose your file and where to get it from. Then how
     to use it to initial your database.

  *) README.web :
      Has details for setting up Apache web server for the web user interface
      to overpass.

Hardware Requirements:

From the "Complete Installation Guide" that comes with the software:
 "Concerning hardware, I suggest at least 4 GB of RAM. The more RAM is available,
 the better, because caching of disk content in the RAM will significantly speed
 up Overpass API. The processor speed will have little relevance. For the hard
 disk, it depends on what you want to install. A full planet database with
 minutely updates should have at least 250 GB of hard disk space at disposal.
 Without minute diffs and meta data, 100 GB would already suffice."

Of course the better hardware the faster result, the big difference shows up in
database initialization and package building when it comes to the cpu, ram and
hard disk. The query result speed is also important, but when this doubles or
even triples, we are talking about seconds so instead of 2 second with great
modern machine verses 4 or 5 seconds with an old machine; that is what the
processor speed have little relevance above is for. This processor speed will
make huge difference during database initialization, 30 minutes verses hours!
It comes down what you can or cannot tolerate. I have two machines they are
both old, both are made by Dell, have 64 bit processors - not same ones - and
both have 16 GB memory; here is a partial list from "inxi -F" command output:

first machine:

System:    Host: yafa.local Kernel: 5.12.12 x86_64 bits: 64 Desktop: IceWM 2.3.4 Distro: Slackware 14.2
Machine:   Type: Desktop System: Dell product: Precision T5600 v: 01 serial: <superuser required>
           Mobo: Dell model: 0Y56T3 v: A00 serial: <superuser required> UEFI: Dell v: A19 date: 06/30/2019
CPU:       Info: 2x Quad Core model: Intel Xeon E5-2643 0 bits: 64 type: MCP SMP cache: L2: 20 MiB
           Speed: 1197 MHz min/max: 1200/3500 MHz Core speeds (MHz): 1: 1197 2: 1591 3: 1269 4: 1197 5: 1197 6: 1216 7: 1197
           8: 1606

Drives:    Local Storage: total: 1.75 TiB used: 239.6 GiB (13.4%)
           ID-1: /dev/nvme0n1 vendor: Samsung model: SSD 970 EVO Plus 1TB size: 931.51 GiB
           ID-2: /dev/sda vendor: Western Digital model: WD2500AAJS-75M0A0 size: 232.83 GiB
           ID-3: /dev/sdb vendor: Toshiba model: MK1655GSX size: 149.05 GiB
           ID-4: /dev/sdc vendor: Samsung model: SSD 870 EVO 500GB size: 465.76 GiB
           ID-5: /dev/sdg type: USB vendor: SanDisk model: Cruzer Blade size: 14.56 GiB

second machine:

System:    Host: lazyant.local Kernel: 5.10.3 x86_64 bits: 64 Desktop: IceWM 2.0.0 Distro: Slackware 14.2
Machine:   Type: Desktop System: Dell product: Precision WorkStation 670 v: N/A serial: <superuser required>
           Mobo: Dell model: 0XC837 serial: <superuser required> BIOS: Dell v: A07 date: 03/15/2006
CPU:       Info: 2x Single Core model: Intel Xeon bits: 64 type: SMP L2 cache: 4 MiB
           Speed: 3192 MHz min/max: N/A Core speeds (MHz): 1: 3192 2: 3192

Drives:    Local Storage: total: 838.39 GiB used: 297.82 GiB (35.5%)
           ID-1: /dev/sda vendor: Seagate model: ST3300622A size: 279.46 GiB
           ID-2: /dev/sdb vendor: Western Digital model: WD2000BB-00RDA0 size: 186.31 GiB
           ID-3: /dev/sdc vendor: A-Data model: SU650 size: 223.57 GiB
           ID-4: /dev/sdd vendor: Western Digital model: WD1600AVBS-63SVA0 size: 149.05 GiB

This is my opinion for hardware:
  1- CPU: any 64 bit - no 32 bit.
  2- RAM: 4 GB.
  3- Hard disk: Solid State Drive is better than magnetic with at least 70 GB free space.

TODO:
timing to initial DB on both machines. (if you look here then look close)

overpass@yafa:~/sources$ time nohup init_osm3s.sh arizona-internal.osh.bz2 "/mnt/sdc5/overpass/DBase/" "/usr/local/" --meta &
[1] 7415
overpass@yafa:~/sources$ nohup: ignoring input and appending output to 'nohup.out'

real	26m12.414s
user	25m35.774s
sys	0m48.209s

[1]+  Done                    time nohup init_osm3s.sh arizona-internal.osh.bz2 "/mnt/sdc5/overpass/DBase/" "/usr/local/" --meta

below was with attic data, same infile same machine but --meta VS --keep-attic option. DB size 19GB vs 33GB
overpass@yafa:~$ fg %-
time nohup /usr/local/bin/init_osm3s.sh sources/arizona-internal.osh.bz2 atticDB/ /usr/local/ --keep-attic

real	52m37.622s
user	47m27.858s
sys	4m15.761s

===============================================================================
second machine with --keep-attic option, database destination is on magnetic HD.

overpass@lazyant:/mnt/sdb1$ time nohup /usr/local/bin/init_osm3s.sh /home/wael/Downloads/arizona-internal.osh.bz2 /mnt/sdb1/DBop/ /usr/local/ --keep-attic &
[1] 13098
overpass@lazyant:/mnt/sdb1$ nohup: ignoring input and appending output to '/home/overpass/nohup.out'

real	136m24.990s
user	100m45.755s
sys	20m59.857s

[1]+  Done                    time nohup /usr/local/bin/init_osm3s.sh /home/wael/Downloads/arizona-internal.osh.bz2 /mnt/sdb1/DBop/ /usr/local/ --keep-attic

TODO: format and explain above output.


Software Installation:

Important Notes:
 - This SlackBuild script compiles the overpassAPI software from source,
   package destination {PKGDEST} installation root is set to /usr/local/.
 - This script creates two new directories under /usr/local/ with names
   "cgi-bin" and "templates".
 - Blog directory along with overpass-doc are added to the package in the
   html directory; for educational purposes. Available on the web online too.
 - This script replaces the source "index.html" file in the html directory with
   that used in an earlier version 0.7.55.9.
 - This script does NOT setup any web server, however it makes the process
   much easier.
 - Included is a script to start and stop the dispatcher dameon for overpass;
   dispatcher is started after database setup.
 
Required before building package:
You need to create "overpass" group and user before building overpassAPI, and
set ownership on the database directory. Database directory is where you will
store your database on your system, you should have enough free space to
store your database, it will be the home directory for the overpass user.
This is done with the following commands:

   # groupadd -g 367 overpass
   # useradd -u 367 -g 367 -d /your/database/directory overpass
   # mkdir /your/database/directory
   # chown overpass:overpass /your/database/directory

Replace "/your/database/directory" with your actual database directory; where
you will store your database. You do need to create the directory and set its
ownership.
Thanks to Robby Workman from SlackBuilds.org for issuing and including the
above ids in the "Recommended UID/GIDs" document in their site. This avoids
conflicts with software installed from SlackBuilds.org, so I highly recommend
you use the above group and user ids. Feel free to use different gid/uid above,
look in your /etc/group and /etc/passwd files first!!!

The short story:
The goal is to setup overpassAPI server on a local machine with a limited area
database for a region, compiling  and installing the software is a first step.
After installing the package, we can move to the next step; get the data to
populate the database, initial the database and then setup web server for our
own overpass server.

To accomplish our goal follow these steps:
1) Create user and group as outlined above in "Required before building".
2) Build the package with SlackBuild script and install it on your machine.
3) Download open street maps data for your area and initial the database.
4) Start overpass dispatcher dameon with "rc.dispatcher". You need to set
database directory first, make sure script is executable.

To have dispatcher start and stop on system boot and shutdown add the
following lines to the following files, (after database setup):

 /etc/rc.d/rc.local
 ============================
 # Startup overpass dispatcher
 if [ -x /etc/rc.d/rc.dispatcher ]; then
    /etc/rc.d/rc.dispatcher start
 fi

 /etc/rc.d/rc.local_shutdown
 ============================
 # Stop overpass dispatcher
 if [ -x /etc/rc.d/rc.dispatcher ]; then
    /etc/rc.d/rc.dispatcher stop
 fi

You may need to create the "/etc/rc.d/rc.local_shutdown" if not present in your
system. The rc.dispatcher script has other options; please see the script file.

5) Setup a web server such as "Apache Web Server" for your overpass server.

The long story is broken into two files mentioned on top of this README, so
please see "README.data" and "README.web". Thank you very much.

Enjoy :)
Wael Hammoudeh
